#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-
# generated by CGL on Mon May 31 14:09:14 2021

import wx, wx.grid
from wx.lib.wordwrap import wordwrap
from wx.adv import AboutDialogInfo, AboutBox
#from wx import richtext as rt

import os
import json

import numpy

import matplotlib
matplotlib.use('WXAgg')
from matplotlib.figure import Figure

from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigCanvas
from matplotlib.backends.backend_wx import NavigationToolbar2Wx

  
def I_from_VT(V, par):
        # Valores nominales - Irradianza nominal (W/m^2) a 25°C
        k = 1.3806503e-23  #Constante de Boltzman (J/K)
        q = 1.60217646e-19 #Carga del electron (C)
        Tn = par[8]+273.15  #Temperatura de operacion nominal (K)
        Vtn = k*Tn/q  #Voltaje de union termica (nominal)

        # 0: n1, 1: Rser, 2: Rpar, 3: Io, 4: Iph, 5: a, 6: Vbr, 7: m  
        f = lambda I, V: par[4] - par[3]*(numpy.exp((V+I*par[1])/(Vtn*par[0]))-1.) - ((V+I*par[1])/par[2]) - (par[5]*(V+par[1]*I)/par[2])*(1.-((V+par[1]*I)/par[6]))**(-par[7])-I 
        
        gf = lambda I, V: -((par[3]*par[1])/(Vtn*par[0]))*numpy.exp((V + I*par[1])/(Vtn*par[0])) - (par[1]/par[2]) - (((par[5]*par[1])/par[2])/(1.-(V+I*par[1])/par[6])**(par[7]))\
               - (((par[5]*par[7]*par[1])/par[6])*((V+I*par[1])/par[2])*(1./(1.-(V+I*par[1])/par[6])**(par[7]+1.)))-1.
        
        Ipvm = numpy.zeros_like(V)
        
        #Newton Rhapson
        Ip = f(Ipvm,V)
        while (numpy.linalg.norm(Ip) > 1e-3):
            Ipvm = Ipvm - Ip/gf(Ipvm,V)
            Ip = f(Ipvm,V)
        return Ipvm


class Data(object):
    def __init__(self, name):
        self.name=name
        self.coori=numpy.array([0.0,0.0])
        self.nper=0
        self.perfiles=numpy.array([])
        self.dim=numpy.array([])
        self.datos=numpy.array([])
        self.colores=[]
        self.np=0.1
        self.npar=5
        self.minval=0.0
        self.maxval=1.0
        self.xmax=0.0
        self.ymax=0.0
        self.metodo=0
        self.funcion=1
        self.particiones=numpy.linspace(self.minval, self.maxval, self.npar+1)
        self.dex=numpy.array([])
        self.dey=numpy.array([])
        self.dez=numpy.array([])
        self.ZI=numpy.array([])

class Principal(wx.Frame):
    def __init__(self, *args, **kwds):
        
        self.nombrestitulos = {0: "Diode ideality factor ($n_1$)", 
                               1: "Series Resistance (Rser)",
                               2: "Shunt Resistance(Rpar)",
                               3: "Saturation current (Io)",
                               4: "Photo-generated current (Iph)",
                               5: "Fraction of ohmic current (a)",
                               6: "Breakdown voltage (Vbr)",
                               7: "Avalanche breakdown exponent (m)",
                               8: "Temperature (T)",
                               9: "Irradiance (Irr)"}
        
        # begin wxGlade: Principal.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        
        icon = wx.Icon('cellsim.ico', wx.BITMAP_TYPE_ICO)
        self.SetIcon(icon)
        
        self.sizer_statbox_conf = wx.StaticBox(self, -1, u"Configuration")
        font = wx.Font(12, wx.DECORATIVE, wx.ITALIC, wx.NORMAL)
        self.sizer_statbox_conf.SetFont(font)
        self.sizer_statbox_bv = wx.StaticBox(self, -1, "Voltage sweep")
        self.sizer_statbox_bv.SetFont(font)
        self.sizer_statbox_bp = wx.StaticBox(self, -1, "Parameter sweep")
        self.sizer_statbox_bp.SetFont(font)
        self.notebook_1 = wx.Notebook(self, -1, style=0)
        
        #Labels for conf sizer
        #self.label_1 = wx.StaticText(self, -1, u"Coordenadas")
        font = wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL)
        self.label_n1 = wx.StaticText(self, -1, "n1")
        self.label_n1.SetFont(font)
        self.label_Rser = wx.StaticText(self, -1, "Rser [Ω]")
        self.label_Rser.SetFont(font)
        self.label_Rpar = wx.StaticText(self, -1, "Rpar [Ω]")
        self.label_Rpar.SetFont(font)
        self.label_Io = wx.StaticText(self, -1, "Io [A]")
        self.label_Io.SetFont(font)
        self.label_Iph = wx.StaticText(self, -1, "Iph [A]")
        self.label_Iph.SetFont(font)
        self.label_a = wx.StaticText(self, -1, "a")
        self.label_a.SetFont(font)
        self.label_Vbr = wx.StaticText(self, -1, "Vbr [V]")
        self.label_Vbr.SetFont(font)
        self.label_m = wx.StaticText(self, -1, "m")
        self.label_m.SetFont(font)
        self.label_T = wx.StaticText(self, -1, "T [ºC]")
        self.label_T.SetFont(font)
        self.label_Irr = wx.StaticText(self, -1, "Irr [sun]")
        #attr_super = rt.RichTextAttr()
        #self.label_Irr.SetStyle (7, 8, attr_super)
        self.label_Irr.SetFont(font)
        
        # Text inputs for conf sizer
        self.text_ctrl_n1 = wx.TextCtrl(self, -1, "1.07366", style = wx.TE_PROCESS_ENTER) 
        self.text_ctrl_n1.Bind(wx.EVT_TEXT_ENTER, self.VerificarNumero)
        self.text_ctrl_Rser = wx.TextCtrl(self, -1, "0.12264", style = wx.TE_PROCESS_ENTER) 
        self.text_ctrl_Rser.Bind(wx.EVT_TEXT_ENTER, self.VerificarNumero)
        self.text_ctrl_Rpar = wx.TextCtrl(self, -1, "49.41592", style = wx.TE_PROCESS_ENTER)
        self.text_ctrl_Rpar.Bind(wx.EVT_TEXT_ENTER, self.VerificarNumero)
        self.text_ctrl_Io = wx.TextCtrl(self, -1, "1.52020e-08", style = wx.TE_PROCESS_ENTER)
        self.text_ctrl_Io.Bind(wx.EVT_TEXT_ENTER, self.VerificarNumero)
        self.text_ctrl_Iph = wx.TextCtrl(self, -1, "0.40681", style = wx.TE_PROCESS_ENTER)
        self.text_ctrl_Iph.Bind(wx.EVT_TEXT_ENTER, self.VerificarNumero)
        self.text_ctrl_a = wx.TextCtrl(self, -1, "0.02243", style = wx.TE_PROCESS_ENTER)
        self.text_ctrl_a.Bind(wx.EVT_TEXT_ENTER, self.VerificarNumero)
        self.text_ctrl_Vbr = wx.TextCtrl(self, -1, "-23.73282", style = wx.TE_PROCESS_ENTER)
        self.text_ctrl_Vbr.Bind(wx.EVT_TEXT_ENTER, self.VerificarNumero)
        self.text_ctrl_m = wx.TextCtrl(self, -1, "6.83816", style = wx.TE_PROCESS_ENTER)
        self.text_ctrl_m.Bind(wx.EVT_TEXT_ENTER, self.VerificarNumero)
        self.text_ctrl_T = wx.TextCtrl(self, -1, "47.8", style = wx.TE_PROCESS_ENTER)
        self.text_ctrl_T.Bind(wx.EVT_TEXT_ENTER, self.VerificarNumero)
        self.text_ctrl_Irr = wx.TextCtrl(self, -1, "0.59", style = wx.TE_PROCESS_ENTER)
        self.text_ctrl_Irr.Bind(wx.EVT_TEXT_ENTER, self.VerificarNumero)
        
        ## Barrido de voltaje elementos ##
        #Labels
        self.label_liminf = wx.StaticText(self, -1, u"Initial")
        self.label_liminf.SetFont(font)
        self.label_limsup = wx.StaticText(self, -1, u"Final")
        self.label_limsup.SetFont(font)
        self.label_pasos = wx.StaticText(self, -1, u"Steps")
        self.label_pasos.SetFont(font)
        # Text inputs
        self.text_ctrl_liminf = wx.TextCtrl(self, -1, "-8.0")
        self.text_ctrl_limsup = wx.TextCtrl(self, -1, "0.5")
        self.text_ctrl_pasos = wx.TextCtrl(self, -1, "500")
        
        ## Barrido de parametro elementos ##
        #Labels
        self.label_bp_par = wx.StaticText(self, -1, "Parameter")
        self.label_bp_par.SetFont(font)
        self.label_bp_liminf = wx.StaticText(self, -1, u"Initial")
        self.label_bp_liminf.SetFont(font)
        self.label_bp_limsup = wx.StaticText(self, -1, u"Final")
        self.label_bp_limsup.SetFont(font)
        self.label_bp_pasos = wx.StaticText(self, -1, u"Steps")
        self.label_bp_pasos.SetFont(font)
        # Text inputs
        self.text_ctrl_bp_liminf = wx.TextCtrl(self, -1, "0.05")
        self.text_ctrl_bp_limsup = wx.TextCtrl(self, -1, "2.0")
        self.text_ctrl_bp_pasos = wx.TextCtrl(self, -1, "10")
        # Combobox
        self.combo_box_bp = wx.ComboBox(self, -1, choices=['n1', 'Rser', 'Rpar', 'Io', 'Iph', 'a', 'Vbr', 'm', 'T', 'Irr'], style=wx.CB_DROPDOWN|wx.CB_READONLY)
        self.combo_box_bp.SetSelection(0)
        # Buttons
        self.button_bp_sim = wx.Button(self, -1, "Simulate")
        self.Bind(wx.EVT_BUTTON, self.simular, self.button_bp_sim)
        self.button_bp_reset = wx.Button(self, -1, "Reset")
        self.Bind(wx.EVT_BUTTON, self.reset, self.button_bp_reset)
        
        #Actualizar registro de colores
        self.colorover='#000000'
        self.colorunder='#FFFFFF'
        
        # Configuracion graficas en matpotlib
        self.dpi = 150
        self.fig_datos = Figure((5.0, 4.0), dpi=self.dpi)
        
        # Notebook de la grafica
        self.panel_page1 = wx.Panel(self.notebook_1,-1, )
        self.notebook_1_grafica = FigCanvas(self.panel_page1, -1, self.fig_datos)
        self.axes = self.fig_datos.add_subplot(111)
        self.chart_toolbar = NavigationToolbar2Wx(self.notebook_1_grafica)
        tw, th = self.chart_toolbar.GetSize()
        fw, fh = self.notebook_1_grafica.GetSize()
        self.chart_toolbar.SetSize(wx.Size(fw, th))
        self.chart_toolbar.Realize()
        
        self.fig_datos2 = Figure((5.0, 4.0), dpi=self.dpi)
        self.panel_page2 = wx.Panel(self.notebook_1,-1, )
        self.notebook_1_grafica2 = FigCanvas(self.panel_page2, -1, self.fig_datos2)
        self.axes2 = self.fig_datos2.add_subplot(111)
        self.chart_toolbar2 = NavigationToolbar2Wx(self.notebook_1_grafica2)
        tw, th = self.chart_toolbar2.GetSize()
        fw, fh = self.notebook_1_grafica2.GetSize()
        self.chart_toolbar2.SetSize(wx.Size(fw, th))
        self.chart_toolbar2.Realize()
        
        self.panel_page3 = wx.Panel(self.notebook_1,-1, )
        bitmap = wx.Bitmap("FiguraGUI1.png")
        image = bitmap.ConvertToImage()
        image = image.Scale(1000, 600, wx.IMAGE_QUALITY_HIGH)
        bitmap = wx.Bitmap(image)
        self.notebook_1_grafica3 = wx.StaticBitmap(self.panel_page3, -1, bitmap )
  
        
        self.namefile = 'NoTitle'
        self.banguar = 0
        self.n = 1
        
        # Menu Bar
        self.MenuPrincipal = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        #wxglade_tmp_menu.Append(91, "&Nuevo Proyecto", "Crea Proyecto", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(95, "&Open parameters file", "Open parameters", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(94, "&Save parameters", "Save parameters", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(93, "&Save parameters as", "Save parameters", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendSeparator()
        #wxglade_tmp_menu.Append(99, "&Importar Datos..", "Abre base de datos", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(101, "&Export figure", "Export figure", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(92, "&Exit", "Close program", wx.ITEM_NORMAL)
        self.MenuPrincipal.Append(wxglade_tmp_menu, "File")
        wxglade_tmp_menu = wx.Menu()
        #wxglade_tmp_menu.Append(100, "&Pegar Datos", "Pega datos", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(102, "&Copy figure", "Copy figure", wx.ITEM_NORMAL)
        self.MenuPrincipal.Append(wxglade_tmp_menu, "Edit")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(90, "&About CellSim", "Info about CellSim", wx.ITEM_NORMAL)
        #wxglade_tmp_menu.Append(91, "&Model description", "Info about the simulation model", wx.ITEM_NORMAL)
        self.MenuPrincipal.Append(wxglade_tmp_menu, "Help")
        self.SetMenuBar(self.MenuPrincipal)
        
        # Menu Bar end
        self.Bind(wx.EVT_MENU, self.OnAboutBox, id=90)
        self.Bind(wx.EVT_MENU, self.ModelDes, id=91)
        self.Bind(wx.EVT_MENU, self.salir, id=92)
        self.Bind(wx.EVT_MENU, self.copiarimag, id=102)
        self.Bind(wx.EVT_MENU, self.guardaimag, id=101)
        self.Bind(wx.EVT_MENU, self.guardaparametros, id=94)
        self.Bind(wx.EVT_MENU, self.guardaparametroscomo, id=93)
        self.Bind(wx.EVT_MENU, self.abrirparametros, id=95)
        
        self.combo_box_bp.Bind(wx.EVT_COMBOBOX, self.camcombo)
        
        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        self.SetTitle("CellSim: [%s]" % self.namefile)
        self.SetBackgroundColour(wx.Colour(212, 208, 200))
        self.text_ctrl_n1.SetMinSize((80, -1))
        self.text_ctrl_Rser.SetMinSize((80, -1))
        self.text_ctrl_Rpar.SetMinSize((80, -1))
        self.text_ctrl_Io.SetMinSize((80, -1))
        self.text_ctrl_Iph.SetMinSize((80, -1))
        self.text_ctrl_a.SetMinSize((80, -1))
        self.text_ctrl_Vbr.SetMinSize((80, -1))
        self.text_ctrl_m.SetMinSize((80, -1))
        self.text_ctrl_T.SetMinSize((80, -1))
        self.text_ctrl_Irr.SetMinSize((80, -1))
        
        self.text_ctrl_liminf.SetMinSize((50, -1))
        self.text_ctrl_limsup.SetMinSize((50, -1))
        self.text_ctrl_pasos.SetMinSize((50, -1))
        
        self.text_ctrl_bp_liminf.SetMinSize((50, -1))
        self.text_ctrl_bp_limsup.SetMinSize((50, -1))
        self.text_ctrl_bp_pasos.SetMinSize((50, -1))
        
        self.button_bp_sim.SetMinSize((60, -1))
        
        self.notebook_1_grafica.SetMinSize((500, 450))
        # end wxGlade

    def __do_layout(self):
        sizer_main = wx.BoxSizer(wx.VERTICAL)
        sizer_submain = wx.BoxSizer(wx.HORIZONTAL)
        sizer_sections = wx.BoxSizer(wx.VERTICAL)
        
        
        
        ## Ubicacion de la GUI de la seccion de configuracion
        sizer_conf = wx.StaticBoxSizer(self.sizer_statbox_conf, wx.VERTICAL)

        sizer_conf_r1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_conf_r2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_conf_r3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_conf_r4 = wx.BoxSizer(wx.HORIZONTAL)
        
        grid_sizer_conf = wx.FlexGridSizer(2, 2, 0, 0)
        grid_sizer_conf2 = wx.FlexGridSizer(2, 2, 0, 0)
        grid_sizer_conf3 = wx.FlexGridSizer(2, 2, 0, 0)
        grid_sizer_conf4 = wx.FlexGridSizer(2, 2, 0, 0)
        grid_sizer_conf5 = wx.FlexGridSizer(2, 2, 0, 0)
        
        grid_sizer_conf.Add(self.label_n1, 0, wx.ALL|wx.ALIGN_CENTER, 2)
        grid_sizer_conf.Add(self.label_Rser, 0, wx.ALL|wx.ALIGN_CENTER, 2)
        grid_sizer_conf.Add(self.text_ctrl_n1, 1, wx.ALL|wx.ALIGN_CENTER, 2)
        grid_sizer_conf.Add(self.text_ctrl_Rser, 1, wx.ALL|wx.ALIGN_CENTER, 2)

        sizer_conf_r1.Add(grid_sizer_conf, 1, wx.EXPAND, 0)
        sizer_conf.Add(sizer_conf_r1, 0, wx.EXPAND, 0)
        
        grid_sizer_conf2.Add(self.label_Rpar, 0, wx.ALL|wx.ALIGN_CENTER, 2)
        grid_sizer_conf2.Add(self.label_Io, 0, wx.ALL|wx.ALIGN_CENTER, 2)
        grid_sizer_conf2.Add(self.text_ctrl_Rpar, 1, wx.ALL|wx.ALIGN_CENTER, 2)
        grid_sizer_conf2.Add(self.text_ctrl_Io, 1, wx.ALL|wx.ALIGN_CENTER, 2)        
        
        sizer_conf_r2.Add(grid_sizer_conf2, 1, wx.EXPAND, 0)
        sizer_conf.Add(sizer_conf_r2, 0, wx.EXPAND, 0)
        
        grid_sizer_conf3.Add(self.label_Iph, 0, wx.ALL|wx.ALIGN_CENTER, 2)
        grid_sizer_conf3.Add(self.label_a, 0, wx.ALL|wx.ALIGN_CENTER, 2)
        grid_sizer_conf3.Add(self.text_ctrl_Iph, 1, wx.ALL|wx.ALIGN_CENTER, 2)
        grid_sizer_conf3.Add(self.text_ctrl_a, 1, wx.ALL|wx.ALIGN_CENTER, 2)
        
        sizer_conf_r3.Add(grid_sizer_conf3, 1, wx.EXPAND, 0)
        sizer_conf.Add(sizer_conf_r3, 0, wx.EXPAND, 0)

        grid_sizer_conf4.Add(self.label_Vbr, 0, wx.ALL|wx.ALIGN_CENTER, 2)
        grid_sizer_conf4.Add(self.label_m, 0, wx.ALL|wx.ALIGN_CENTER, 2)
        grid_sizer_conf4.Add(self.text_ctrl_Vbr, 1, wx.ALL|wx.ALIGN_CENTER, 2)
        grid_sizer_conf4.Add(self.text_ctrl_m, 1, wx.ALL|wx.ALIGN_CENTER, 2)
        
        
        sizer_conf_r4.Add(grid_sizer_conf4, 1, wx.EXPAND, 0)
        sizer_conf.Add(sizer_conf_r4, 0, wx.EXPAND, 0)
        
        grid_sizer_conf5.Add(self.label_T, 0, wx.ALL|wx.ALIGN_CENTER, 2)
        #grid_sizer_conf5.Add(wx.StaticText(self, -1, ""), 0,  wx.ALL|wx.ALIGN_CENTER, 2)
        grid_sizer_conf5.Add(self.label_Irr, 0, wx.ALL|wx.ALIGN_CENTER, 2)
        grid_sizer_conf5.Add(self.text_ctrl_T, 1, wx.ALL|wx.ALIGN_CENTER, 2)
        grid_sizer_conf5.Add(self.text_ctrl_Irr, 1, wx.ALL|wx.ALIGN_CENTER, 2)
        
        sizer_conf.Add(grid_sizer_conf5, 0, wx.EXPAND, 0)
        
        sizer_conf.Add(self.button_bp_reset, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 0)
        
        sizer_sections.Add(sizer_conf, 0, wx.EXPAND, 2)
        
        
        ## Ubicacion de la GUI de la seccion de barrido de voltaje
        sizer_bv = wx.StaticBoxSizer(self.sizer_statbox_bv, wx.VERTICAL)

        sizer_bv_r1 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_bv = wx.FlexGridSizer(2, 3, 0, 0)
        
        grid_sizer_bv.Add(self.label_liminf, 0, wx.ALL|wx.ALIGN_LEFT, 2)
        grid_sizer_bv.Add(self.label_limsup, 0, wx.ALL|wx.ALIGN_CENTER, 2)
        grid_sizer_bv.Add(self.label_pasos, 0, wx.ALL|wx.ALIGN_RIGHT, 2)
        
        grid_sizer_bv.Add(self.text_ctrl_liminf, 1, wx.ALL|wx.ALIGN_LEFT, 2)
        grid_sizer_bv.Add(self.text_ctrl_limsup, 1, wx.ALL|wx.ALIGN_CENTER, 2)
        grid_sizer_bv.Add(self.text_ctrl_pasos, 1, wx.ALL|wx.ALIGN_RIGHT, 2)
        sizer_bv_r1.Add(grid_sizer_bv, 1, wx.EXPAND, 0)
        
        sizer_bv.Add(sizer_bv_r1, 0, wx.EXPAND, 0)
        
        ## Ubicacion de la GUI de la seccion de barrido de parametro
        sizer_bp = wx.StaticBoxSizer(self.sizer_statbox_bp, wx.VERTICAL)

        sizer_bp_r1 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_bp = wx.FlexGridSizer(2, 3, 0, 0)
        
        grid_sizer_bp.Add(self.label_bp_liminf, 0, wx.ALL|wx.ALIGN_LEFT, 2)
        grid_sizer_bp.Add(self.label_bp_limsup, 0, wx.ALL|wx.ALIGN_CENTER, 2)
        grid_sizer_bp.Add(self.label_bp_pasos, 0, wx.ALL|wx.ALIGN_RIGHT, 2)
        
        grid_sizer_bp.Add(self.text_ctrl_bp_liminf, 1, wx.ALL|wx.ALIGN_LEFT, 2)
        grid_sizer_bp.Add(self.text_ctrl_bp_limsup, 1, wx.ALL|wx.ALIGN_CENTER, 2)
        grid_sizer_bp.Add(self.text_ctrl_bp_pasos, 1, wx.ALL|wx.ALIGN_RIGHT, 2)
        sizer_bp_r1.Add(grid_sizer_bp, 1, wx.EXPAND, 0)
        
        sizer_bp.Add(sizer_bp_r1, 0, wx.EXPAND, 0)
        
        sizer_bp_par = wx.BoxSizer(wx.HORIZONTAL)
        sizer_bp_par.Add(self.label_bp_par, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 2)
        sizer_bp_par.Add(self.combo_box_bp, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 2)
        
        sizer_bp.Add(sizer_bp_par, 0, wx.EXPAND, 0)
        sizer_bp.Add(self.button_bp_sim, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 0)
        
        sizer_sections.Add(sizer_bv, 0, wx.EXPAND, 2)
        sizer_sections.Add(sizer_bp, 0, wx.EXPAND, 2)

        sizer_submain.Add(sizer_sections, 0, wx.EXPAND, 2)
        
        #Agregan paginas del notebook
        sizer_page1 = wx.BoxSizer(wx.VERTICAL)
        sizer_page1.Add(self.notebook_1_grafica, 1, wx.TOP | wx.LEFT | wx.EXPAND)
        sizer_page1.Add(self.chart_toolbar, 0, wx.LEFT | wx.EXPAND)
        self.panel_page1.SetSizer(sizer_page1)
        self.notebook_1.AddPage(self.panel_page1, "I-V curve")
        
        sizer_page2 = wx.BoxSizer(wx.VERTICAL)
        sizer_page2.Add(self.notebook_1_grafica2, 1, wx.TOP | wx.LEFT | wx.EXPAND)
        sizer_page2.Add(self.chart_toolbar2, 0, wx.LEFT | wx.EXPAND)
        self.panel_page2.SetSizer(sizer_page2)
        
        self.notebook_1.AddPage(self.panel_page2, "P-V curve")
        
        self.notebook_1.AddPage(self.panel_page3, "Electrical Circuit")
        
        #Agregamos el submain al main
        sizer_submain.Add(self.notebook_1, 1, wx.ALL|wx.EXPAND, 1)
        sizer_main.Add(sizer_submain, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_main)
        sizer_main.Fit(self)
        self.Layout()
        # end wxGlade


    def camcombo(self,event):
        sel = self.combo_box_bp.GetSelection()
        if sel == 0: #n1
            minimo = "0.05"
            maximo = "2.0"
        if sel == 1: #Rser
            minimo = "1e-5"
            maximo = "2.0"
        if sel == 2: #Rpar
            minimo = "5.0"
            maximo = "100.0"
        if sel == 3: #Io
            minimo = "1e-10"
            maximo = "1e-7" 
        if sel == 4: #Iph
            minimo = "0.35"
            maximo = "0.55"
        if sel == 5: #a
            minimo = "2e-3"
            maximo = "20e-3"
        if sel == 6: #Vbr
            minimo = "-50.0"
            maximo = "-20.0"
        if sel == 7: #m
            minimo = "2.0"
            maximo = "6.0"
        if sel == 8: #T
            minimo = "10.0"
            maximo = "45.0"
        if sel == 9: #Irr
            minimo = "0.2"
            maximo = "1.0"
        
        self.text_ctrl_bp_liminf.SetValue(minimo)
        self.text_ctrl_bp_limsup.SetValue(maximo)

    def VerificarNumero(self, evt):
        widget = evt.GetEventObject()
        print(widget.GetId())
        if not evt.GetString()=='':
            try:
                float(evt.GetString())
            except:
                wx.MessageBox('Error al ingresar Coordenada en X. \nEl separador decimal es punto ".".', 'Aviso',wx.ICON_ERROR)
        else:
            return
        
    def simular(self,event):
        ParSel = self.combo_box_bp.GetSelection()
        par = numpy.zeros((10,))
        par[0] = float(self.text_ctrl_n1.GetValue()) 
        par[1] = float(self.text_ctrl_Rser.GetValue())
        par[2] = float(self.text_ctrl_Rpar.GetValue()) 
        par[3] = float(self.text_ctrl_Io.GetValue())
        par[4] = float(self.text_ctrl_Iph.GetValue()) 
        par[5] = float(self.text_ctrl_a.GetValue())
        par[6] = float(self.text_ctrl_Vbr.GetValue()) 
        par[7] = float(self.text_ctrl_m.GetValue())
        par[8] = float(self.text_ctrl_T.GetValue())
        par[9] = float(self.text_ctrl_Irr.GetValue())
        
        V_ls = float(self.text_ctrl_limsup.GetValue())
        V_li = float(self.text_ctrl_liminf.GetValue())
        V_steps = int(self.text_ctrl_pasos.GetValue())
        V = numpy.linspace(V_li, V_ls, V_steps)

        bp_ls = float(self.text_ctrl_bp_limsup.GetValue())
        bp_li = float(self.text_ctrl_bp_liminf.GetValue())
        bp_steps = int(self.text_ctrl_bp_pasos.GetValue())
        bp = numpy.linspace(bp_li, bp_ls, bp_steps)
        
        if ParSel == 9:
            ParSel = 4
            bp = 1.470588235294118*bp
        
        self.axes.clear()
        self.axes.grid()
        self.axes.set_ylabel("Current I [A]", fontsize=14)
        self.axes.set_xlabel("Voltage V [V]", fontsize=14)
        self.axes.set_title(self.nombrestitulos[ParSel], fontsize=14)
        
        self.axes2.clear()
        self.axes2.grid()
        self.axes2.set_ylabel("Power P [Watt]", fontsize=14)
        self.axes2.set_xlabel("Voltage V [V]", fontsize=14)
        self.axes2.set_title(self.nombrestitulos[ParSel], fontsize=14)
        
        
        box = self.axes.get_position()
        self.axes.set_position([box.x0, box.y0, box.width * 0.7, box.height])
        self.axes2.set_position([box.x0, box.y0, box.width * 0.7, box.height])
        for bp_i in bp:
            par[ParSel] = bp_i
            I = I_from_VT(V, par)
            P = I*V
            indx = numpy.where(I>0.0)
            self.axes.plot(V[indx],I[indx], label="{:.2e}".format(bp_i))
            #self.axes.yaxis.set_tick_params(labelsize='medium')
            #self.axes.xaxis.set_tick_params(labelsize='medium')
            self.axes.legend(shadow=True, loc='lower left', bbox_to_anchor=(1.05, 0))
            
            self.axes2.plot(V[indx],P[indx], label="{:.2e}".format(bp_i))
            self.axes2.legend(shadow=True, loc='lower left', bbox_to_anchor=(1.05, 0))
            
            
            #self.axes.legend(bbox_to_anchor=(1.05, 1), loc='upper left', fontsize='small')
            

            # Put a legend to the right of the current axis
            #self.axes.legend(loc='center left', bbox_to_anchor=(1, 0.5))

            self.notebook_1_grafica.draw()
            self.notebook_1_grafica2.draw()

    def reset(self,event):
        self.text_ctrl_n1.SetLabelText("1.07366") 
        self.text_ctrl_Rser.SetLabelText("0.12264") 
        self.text_ctrl_Rpar.SetLabelText("49.41592")
        self.text_ctrl_Io.SetLabelText("1.52020e-08")
        self.text_ctrl_Iph.SetLabelText("0.40681")
        self.text_ctrl_a.SetLabelText("0.02243")
        self.text_ctrl_Vbr.SetLabelText("-23.73282")
        self.text_ctrl_m.SetLabelText("6.83816")
        self.text_ctrl_T.SetLabelText("47.8")
        self.text_ctrl_Irr.SetLabelText("0.59")
        
        
    def abrirparametros(self, event):
        dlg = wx.FileDialog(self, "Select file", os.getcwd(), "", "CellSim parameters (*.csp)|*.csp", style=wx.FD_OPEN)
        if dlg.ShowModal() == wx.ID_OK:
            self.namefile = dlg.GetPath()
            #mypath = os.path.basename(path)
            #self.SetStatusText("Seleccionado: %s" % mypath)
            self.SetTitle("CellSim: [%s]" % self.namefile)
            with open(self.namefile, 'r') as fp:
                data = json.load(fp)
            self.text_ctrl_n1.SetValue(data['n1'])
            self.text_ctrl_Rser.SetValue(data['Rser'])
            self.text_ctrl_Rpar.SetValue(data['Rpar'])
            self.text_ctrl_Io.SetValue(data['Io'])
            self.text_ctrl_Iph.SetValue(data['Iph'])
            self.text_ctrl_a.SetValue(data['a'])
            self.text_ctrl_Vbr.SetValue(data['Vbr'])
            self.text_ctrl_m.SetValue(data['m'])
            self.text_ctrl_T.SetValue(data['T'])
            self.text_ctrl_limsup.SetValue(data['V_ls'])
            self.text_ctrl_liminf.SetValue(data['V_li'])
            self.text_ctrl_pasos.SetValue(data['V_steps'])
            self.text_ctrl_bp_limsup.SetValue(data['bp_ls'])
            self.text_ctrl_bp_liminf.SetValue(data['bp_li'])
            self.text_ctrl_bp_pasos.SetValue(data['bp_steps'])
            
            
        dlg.Destroy()
    
    def getdata(self):
        data = {}
        data['n1'] = self.text_ctrl_n1.GetValue()
        data['Rser'] = self.text_ctrl_Rser.GetValue()
        data['Rpar'] = self.text_ctrl_Rpar.GetValue()
        data['Io'] = self.text_ctrl_Io.GetValue()
        data['Iph'] = self.text_ctrl_Iph.GetValue()
        data['a'] = self.text_ctrl_a.GetValue()
        data['Vbr'] = self.text_ctrl_Vbr.GetValue() 
        data['m'] = self.text_ctrl_m.GetValue()
        data['T'] = self.text_ctrl_T.GetValue()
        
        data['V_ls'] = self.text_ctrl_limsup.GetValue()
        data['V_li'] = self.text_ctrl_liminf.GetValue()
        data['V_steps'] = self.text_ctrl_pasos.GetValue()
        
        data['bp_ls'] = self.text_ctrl_bp_limsup.GetValue()
        data['bp_li'] = self.text_ctrl_bp_liminf.GetValue()
        data['bp_steps'] = self.text_ctrl_bp_pasos.GetValue()
        return data
    
    def guardaparametros(self, event):
        data = self.getdata()
        if self.namefile == 'NoTitle':
            # almacenar parametros    
            dlg = wx.FileDialog(self, "Filename", os.getcwd(), "", "Project (*.csp)|*.csp", wx.FD_SAVE)
            if dlg.ShowModal() == wx.ID_OK:
                self.namefile = dlg.GetPath()
                with open(self.namefile, 'w') as fp:
                    json.dump(data, fp)
                self.SetTitle("CellSim: [%s]" % self.namefile)
        else:
            with open(self.namefile, 'w') as fp:
                json.dump(data, fp) 
        
    def guardaparametroscomo(self, event):
        # almacenar parametros
        data = self.getdata()      
        
        dlg = wx.FileDialog(self, "Filename", os.getcwd(), "", "Project (*.csp)|*.csp", wx.FD_SAVE)
        if dlg.ShowModal() == wx.ID_OK:
            self.namefile = dlg.GetPath()
            with open(self.namefile, 'w') as fp:
                json.dump(data, fp)
            self.SetTitle("CellSim: [%s]" % self.namefile)
        dlg.Destroy()
    

    def copiarimag(self, event):
        num = self.notebook_1.GetSelection()
        if num == 0:
            fig = self.notebook_1_grafica
        elif num == 1:
            fig = self.notebook_1_grafica2

        fig.Copy_to_Clipboard()
    
    def guardaimag(self, event):
        num = self.notebook_1.GetSelection()
        if num == 0:
            fig = self.notebook_1_grafica
        elif num == 1:
            fig = self.notebook_1_grafica2

        
        """ save figure image to file"""
        file_choices = "PNG (*.png)|*.png|" \
                       "PDF (*.pdf)|*.pdf|" \
                       "PS (*.ps)|*.ps|" \
                       "EPS (*.eps)|*.eps|" \
                       "BMP (*.bmp)|*.bmp"

        thisdir  = os.getcwd()

        dlg = wx.FileDialog(self, message='Save figure as...',
                            defaultDir = thisdir, defaultFile='plot.png',
                            wildcard=file_choices, style=wx.FD_SAVE)

        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPath()
            fig.print_figure(path,dpi=300,bbox_inches='tight',transparent='True')
            if (path.find(thisdir) ==  0):
                path = path[len(thisdir)+1:]
            print('Saved plot to %s' % path)

    def ModelDes(self, event):
        
        self.png = wx.StaticBitmap(self, -1, wx.Bitmap("circuit.png", wx.BITMAP_TYPE_ANY))


    def OnAboutBox(self, event):
        descripcion = wordwrap(
            "CellSim is a software package programmed in Python using WxPython, Numpy and Matplotlib libraries.\n "
            "It was design with the aim of plotting I-V and P-V curves for different values"
            "for the parameters of a single diode PV (Bishop's model). \n"
            "Additionally, this software is product of the research project PCI20201"
            "from Instituto Tecnologico Metropolitano, Medellin, Antioquia.\n"
            "Bishop, J. W. (1988). Computer simulation of the effects of electrical mismatches in photovoltaic cell interconnection circuits. Solar cells, 25(1), 73-89.",
            350, wx.ClientDC(self))

        licence =wordwrap(
            "CellSim is a free software.",
            500, wx.ClientDC(self))


        info = AboutDialogInfo()

        #info.SetIcon(wx.Icon('icons/hunter.png', wx.BITMAP_TYPE_PNG))
        info.SetName('CellSim')
        info.SetVersion('0.1')
        info.SetDescription(descripcion)
        info.SetCopyright('(C) 2021 Cristian Guarnizo, Bonie Restrepo, Adriana Trejos')
        #info.SetWebSite('http://www.zetcode.com')
        info.SetLicence(licence)
        info.AddDeveloper('Cristian Guarnizo - Developer')
        info.AddDeveloper('Bonie Restrepo y Adriana Trejos - Requirements design')
        #info.AddDocWriter('jan bodnar')
        #info.AddArtist('The Tango crew')
        #info.AddTranslator('jan bodnar')
        AboutBox(info)


    
    def salir(self, evt):
        self.Close()

# end of class Principal

if __name__ == "__main__":
    app = wx.App(0)
    wx.InitAllImageHandlers()
    frame_2 = Principal(None, -1, "")
    app.SetTopWindow(frame_2)
    frame_2.Show()
    app.MainLoop()